========================
Lazy reST error handling
========================

.. |rst| replace:: reStructuredText

This document describes how error handling is done by `Lazy reSt
<https://github.com/gradha/lazy_rest>`_.  See also the main `README
<../README.rst>`_.


Introduction and test cases
===========================

Error handling transforming |rst| files involves two variables: user inputs and
code.  The inputs are |rst| files which you feed to the code. Inputs can be
valid, but they can also contain syntax errors. Code can be valid, but it can
contain errors or handle incorrectly corner cases. There are also situations
out of reach for the code which will affect the software (e.g. invalid
permissions reading input files).

Problems in |rst| inputs are typically handled during parsing, the parser will
stop processing the input and will bail out with an error and hopefully a
line/column number the user can go to in order to fix the input. Code errors
are mitigated through the wrapping of all code inside ``try/catch`` blocks.  In
both cases (|rst| inputs and code errors), the exception handling will still
try to present a valid HTML to the user (for *peculiar* values of the word
``valid``).

In the ``tests/errors`` subdirectory of the Lazy reST project you can find
``test_errors.nim``. Compiling and running this program will generate multiple
HTML files which show how the software reacts to different user input and code
errors. Files with the name pattern ``normal_*.html`` will contain the default
error page generated by the software. Files with the name pattern
``forced_*.html`` will contain a special static *last case* attempt at handling
errors. You can look at these files to check what the user will see when the
``safe_*`` procs of Lazy reST are used. In general they will try to show a
redirection to the GitHub issue tracker, the list of errors, and the raw user
input for inspection.


Error pages
===========

The ``normal_*.html`` files show roughly the same content as the one produced
from the file `default_error_html_template.rst
<../tests/errors/default_error_html_template.rst>`_ . The ``forced_*.html``
files will show roughly the same content as the one produced from the file
`safe_error_html_template.rst <../tests/errors/safe_error_html_template.rst>`_.

Internally when something goes wrong, Lazy reST will try to show the normal
error page. This page still involves a degree of runtime uncertainty and could
fail despite all attempts to prevent this from happening. It is in this extreme
cases that the second type of error page is displayed. This one is completely
static and is built based on simple string concatenation. If this one fails
too, it means the process/machine has reached a critical unrecoverable point
and pretty much nothing in software can be done about it.

To render the second *failsafe* static error, a special configuration variable
is used to force an error during the normal generation.


Customization of the error page
===============================

Lazy reST allows you to set up different error pages which will be displayed to
the user. Through the `set_normal_error_rst()
<../lazy_rest.html#set_normal_error_rst>`_ and `set_safe_error_rst()
<../lazy_rest.html#set_safe_error_rst>`_  procs you can set both the normal and
static error pages to either point at your own online GitHub issue/support
tracker, or maybe because you want to internationalize the help text. The
normal error page allows `substitution expression (subexe) interpolations
<http://nimrod-lang.org/subexes.html>`_ with the following *dollar* variables:

* ``title``: replaced by the title of the input file if anything was extracted.
* ``date``: input file last modification GMT date in ``yyyy-MM-dd`` format.
* ``time``: input file last modification GMT time in ``HH:mm`` format.
* ``local_date``: like ``date`` but using the current locale timezone.
* ``local_time``: like ``time`` but using the current locale timezone.
* ``fileTime``: last modification timestamp as Unix epoch but in milliseconds
  instead of seconds.
* ``content``: the actual |rst| input rendered as HTML.

If any of these values can't be provided by the library (e.g. input file is
missing, thus no date/time values can be extracted) the empty string will be
used instead. You don't need to include these in your error template, they are
optional.  Rendered pages without errors also use the following additional
subexes to embed the Prism JavaScript code:

* ``prism_js``: replaced by the Prism JavaScript snippet when external
  highlighting is used.
* ``prism_css``: replaced by the Prism CSS code required to style code
  highlighting.

In any case, the file ``tests/errors/default_error_html_template.rst`` is not
used directly by Lazy reST, some modifications are done, you can see the real
error file at `resources/error_html.template
<https://github.com/gradha/lazy_rest/blob/master/resources/error_html.template>`_.

Also, the static error page doesn't use subexe interpolation and is split into
two parts with the actual error messages and content sandwiched between
`resources/safe_error_start.template
<https://github.com/gradha/lazy_rest/blob/master/resources/safe_error_start.template>`_
and `resources/safe_error_end.template
<https://github.com/gradha/lazy_rest/blob/master/resources/safe_error_end.template>`_.
When you use `set_safe_error_rst() <../lazy_rest.html#set_safe_error_rst>`_ to
specify the safe error page, on top of being valid reStructuredText input, the
final HTML **has** to contain the string ``$content`` somewhere. This string is
used as a marker to split the begin/end of the HTML error page for later
concatenation.

If you want to test your customized error page, feel free to modify **XXXX**
and rerun ``tests/errors/test_errors.nim`` to see what your users will look at
(hopefully not very often).
